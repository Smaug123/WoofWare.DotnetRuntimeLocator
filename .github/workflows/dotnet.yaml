# yaml-language-server: $schema=https://raw.githubusercontent.com/SchemaStore/schemastore/master/src/schemas/json/github-workflow.json
name: .NET

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  NUGET_XMLDOC_MODE: ''
  DOTNET_MULTILEVEL_LOOKUP: 0

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v5
      with:
        fetch-depth: 0 # so that NerdBank.GitVersioning has access to history
    - uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    - name: Restore dependencies
      run: dotnet restore
    - name: Test
      run: dotnet test
    - name: Publish
      run: dotnet publish Example
    - name: Run example
      run: ".\\Example\\bin\\Release\\net8.0\\Example.exe"

  build:
    strategy:
      matrix:
        config:
          - Release
          - Debug

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v5
      with:
        fetch-depth: 0 # so that NerdBank.GitVersioning has access to history
    - name: Install Nix
      uses: cachix/install-nix-action@v31
      with:
        extra_nix_config: |
          access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
    - name: Restore dependencies
      run: nix develop --command dotnet restore
    - name: Build
      run: nix develop --command dotnet build --no-restore --configuration ${{matrix.config}}
    - name: Test
      run: nix develop --command dotnet test --no-build --verbosity normal --configuration ${{matrix.config}}
    - name: Publish example self-contained
      run: nix develop --command dotnet publish --self-contained --runtime linux-x64 --verbosity normal --configuration ${{matrix.config}} Example
    - name: Run example self-contained
      run: "./Example/bin/${{matrix.config}}/net*/*-*/Example"
    - name: Publish example non-self-contained
      run: nix develop --command dotnet publish --verbosity normal --configuration ${{matrix.config}} Example
    - name: Run example non-self-contained
      run: "./Example/bin/${{matrix.config}}/net*/Example"

  build-nix:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          extra_nix_config: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
      - name: Build
        run: nix build
      - name: Reproducibility check
        run: nix build --rebuild

  check-dotnet-format:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          extra_nix_config: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
      - name: Run Fantomas
        run: nix run .#fantomas -- --check .

  check-nix-format:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          extra_nix_config: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
      - name: Run Alejandra
        run: nix develop --command alejandra --check .

  linkcheck:
    name: Check links
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          extra_nix_config: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
      - name: Run link checker
        run: nix develop --command markdown-link-check README.md

  flake-check:
    name: Check flake
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          extra_nix_config: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
      - name: Flake check
        run: nix flake check

  nuget-pack:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5
      with:
        fetch-depth: 0 # so that NerdBank.GitVersioning has access to history
    - name: Install Nix
      uses: cachix/install-nix-action@v31
      with:
        extra_nix_config: |
          access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
    - name: Restore dependencies
      run: nix develop --command dotnet restore
    - name: Build
      run: nix develop --command dotnet build --no-restore --configuration Release
    - name: Pack
      run: nix develop --command dotnet pack --configuration Release
    - name: Upload NuGet artifact
      uses: actions/upload-artifact@v4
      with:
        name: nuget-package
        path: WoofWare.DotnetRuntimeLocator/bin/Release/WoofWare.DotnetRuntimeLocator.*.nupkg

  expected-pack:
    needs: [nuget-pack]
    runs-on: ubuntu-latest
    steps:
      - name: Download NuGet artifact
        uses: actions/download-artifact@v5
        with:
          name: nuget-package
          path: packed
      - name: Check NuGet contents
        # Verify that there is exactly one nupkg in the artifact that would be NuGet published
        run: if [[ $(find packed -maxdepth 1 -name 'WoofWare.DotnetRuntimeLocator.*.nupkg' -printf c | wc -c) -ne "1" ]]; then exit 1; fi

  github-release-dry-run:
    runs-on: ubuntu-latest
    needs: [nuget-pack]
    steps:
      - uses: actions/checkout@v5
      - name: Download NuGet artifact
        uses: actions/download-artifact@v5
        with:
          name: nuget-package
      - name: Compute package path
        id: compute-path
        run: |
          find . -maxdepth 1 -type f -name 'WoofWare.DotnetRuntimeLocator.*.nupkg' -exec sh -c 'echo "output=$(basename "$1")" >> $GITHUB_OUTPUT' shell {} \;
      - name: Compute tag name
        id: compute-tag
        env:
          NUPKG_PATH: ${{ steps.compute-path.outputs.output }}
        run: echo "output=$(basename "$NUPKG_PATH" .nupkg)" >> $GITHUB_OUTPUT
      - name: Tag and release
        uses: G-Research/common-actions/github-release@19d7281a0f9f83e13c78f99a610dbc80fc59ba3b
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          target-commitish: ${{ github.sha }}
          tag: ${{ steps.compute-tag.outputs.output }}
          binary-contents: ${{ steps.compute-path.outputs.output }}
          dry-run: true

  all-required-checks-complete:
    if: ${{ always() }}
    needs: [check-dotnet-format, check-nix-format, build, build-nix, linkcheck, flake-check, nuget-pack, expected-pack, github-release-dry-run, build-windows]
    runs-on: ubuntu-latest
    steps:
      - uses: G-Research/common-actions/check-required-lite@2b7dc49cb14f3344fbe6019c14a31165e258c059
        with:
          needs-context: ${{ toJSON(needs) }}

  attestation:
    runs-on: ubuntu-latest
    needs: [all-required-checks-complete]
    if: ${{ !github.event.repository.fork && github.ref == 'refs/heads/main' }}
    permissions:
      id-token: write
      attestations: write
      contents: read
    steps:
      - name: Download NuGet artifact
        uses: actions/download-artifact@v5
        with:
          name: nuget-package
          path: packed
      - name: Attest Build Provenance
        uses: actions/attest-build-provenance@977bb373ede98d70efdf65b84cb5f73e068dcc2a # v3.0.0
        with:
          subject-path: "packed/WoofWare.DotnetRuntimeLocator.*.nupkg"

  nuget-publish:
    runs-on: ubuntu-latest
    if: ${{ !github.event.repository.fork && github.ref == 'refs/heads/main' }}
    needs: [attestation]
    environment: main-deploy
    permissions:
      id-token: write
      attestations: write
      contents: read
    steps:
      - uses: actions/checkout@v5
      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          extra_nix_config: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
      - name: Download NuGet artifact
        uses: actions/download-artifact@v5
        with:
          name: nuget-package
          path: packed
      - name: Identify .NET
        id: identify-dotnet
        run: nix develop --command bash -c "echo dotnet=$(which dotnet) >> $GITHUB_OUTPUT"
      - name: Publish NuGet package
        uses: G-Research/common-actions/publish-nuget@2b7dc49cb14f3344fbe6019c14a31165e258c059
        with:
          package-name: WoofWare.DotnetRuntimeLocator
          nuget-key: ${{ secrets.NUGET_API_KEY }}
          nupkg-dir: packed/
          dotnet: ${{ steps.identify-dotnet.outputs.dotnet }}

  github-release:
    runs-on: ubuntu-latest
    if: ${{ !github.event.repository.fork && github.ref == 'refs/heads/main' }}
    needs: [all-required-checks-complete]
    environment: main-deploy
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v5
      - name: Download NuGet artifact
        uses: actions/download-artifact@v5
        with:
          name: nuget-package
      - name: Compute package path
        id: compute-path
        run: |
          find . -maxdepth 1 -type f -name 'WoofWare.DotnetRuntimeLocator.*.nupkg' -exec sh -c 'echo "output=$(basename "$1")" >> $GITHUB_OUTPUT' shell {} \;
      - name: Compute tag name
        id: compute-tag
        env:
          NUPKG_PATH: ${{ steps.compute-path.outputs.output }}
        run: echo "output=$(basename "$NUPKG_PATH" .nupkg)" >> $GITHUB_OUTPUT
      - name: Tag and release
        uses: G-Research/common-actions/github-release@19d7281a0f9f83e13c78f99a610dbc80fc59ba3b
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          target-commitish: ${{ github.sha }}
          tag: ${{ steps.compute-tag.outputs.output }}
          binary-contents: ${{ steps.compute-path.outputs.output }}
